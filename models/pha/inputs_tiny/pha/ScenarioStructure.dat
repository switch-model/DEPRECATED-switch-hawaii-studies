param ScenarioBasedData := False ;

set Stages := Build Operate ;

set Nodes := RootNode 
    fuel_supply_curves_0000
    fuel_supply_curves_0001
    fuel_supply_curves_0002
    fuel_supply_curves_0003
;

param NodeStage := RootNode Build
    fuel_supply_curves_0000 Operate
    fuel_supply_curves_0001 Operate
    fuel_supply_curves_0002 Operate
    fuel_supply_curves_0003 Operate
;

set Children[RootNode] := 
    fuel_supply_curves_0000
    fuel_supply_curves_0001
    fuel_supply_curves_0002
    fuel_supply_curves_0003
;

param ConditionalProbability := RootNode 1.0
    fuel_supply_curves_0000 0.25
    fuel_supply_curves_0001 0.25
    fuel_supply_curves_0002 0.25
    fuel_supply_curves_0003 0.25
;

set Scenarios :=  
    Scenario_0000
    Scenario_0001
    Scenario_0002
    Scenario_0003
;

param ScenarioLeafNode := 
    Scenario_0000 fuel_supply_curves_0000
    Scenario_0001 fuel_supply_curves_0001
    Scenario_0002 fuel_supply_curves_0002
    Scenario_0003 fuel_supply_curves_0003
;

set StageVariables[Build] := 
    BuildProj[*,*]
    BuildBattery[*,*]
    BuildPumpedHydroMW[*,*]
    BuildAnyPumpedHydro[*,*]
    RFMSupplyTierActivate[*,*,*]
    BuildElectrolyzerMW[*,*]
    BuildLiquifierKgPerHour[*,*]
    BuildLiquidHydrogenTankKg[*,*]
    BuildFuelCellMW[*,*]
;

set StageVariables[Operate] := 
    DumpPower[*,*]
    DispatchProj[*,*]
    ProjFuelUseRate[*,*,*]
    FuelConsumptionByTier[*,*,*]
    FuelConsumptionInMarket[*,*]
    BaseloadOperatingLevelForPeriod[*,*]
    DemandResponse[*,*]
    ChargeEVs[*,*]
    PumpedHydroProjGenerateMW[*,*]
    PumpedHydroProjStoreMW[*,*]
    RunElectrolyzerMW[*,*]
    LiquifyHydrogenKgPerHour[*,*]
    WithdrawLiquidHydrogenKg[*,*]
    DispatchFuelCellMW[*,*]
    ChargeBattery[*,*]
    DischargeBattery[*,*]
    BatteryLevel[*,*]
;

param StageCostVariable := 
    Build BuildCost
    Operate OperateCost
;

