+ get a tiny rps dataset that reaches 2045 (rps_tiny)
project +loads, -equipment costs and +fuel costs to 2050

+ convert future fuel costs from nominal to real based on inflation used in HECO IRP reports (maybe 2.5%/year according to p. K-97 of http://www.hawaiianelectric.com/vcmcontent/IntegratedResource/IRP/PDF/IRP-2013-App-K-Supply-Side-Resource-Assessment-062813-Filed.pdf)

+ check that connection cable costs are not overstated by 1000 for wind projects

- eventually: use different capital costs for generator projects each year and account for inflation. For now, we assume capital costs for all technologies are constant in real terms.

+ use RPS module

+ project ev adoption to 2050 (use /Users/matthias/Dropbox/Research/Shared/Switch-Hawaii/data/HECO IRP Report/IRP-2013-App-E-Quantifying-the-Scenarios-062813-Filed.pdf and something more aggressive)
+ create simple EV module (fully shiftable); this should add the cost of EV ownership to obj. fn too.
+ create simple no_ev module; this should add the baseline vehicle ownership and fuel cost to obj fn.

+ create battery module that models standard storage

+ create demand response module that models demand response as simple shiftable load
(ev, dr and batteries are like kauai model)


+ create pumped_hydro model that models wilson pumped hydro project

+get solve.py to accept arguments, e.g., names of elements to add:
	ph, dr, ev, biofuel yes/no, rps yes/no, high_fuel/low_fuel costs?, low_battery/high_battery costs?, +low_load/high_load?, wind?
+Then it should add the appropriate modules and set the tag for output files.

- get scenario_data.py to create separate tables for multi-scenario data (at least ev_energy) and copy the one specified by **_scen_id to the base name.

- patch switch_mod.util with a set_datafile_alias(datafile, alias) function, which tells it to use the alias file instead of the normal datafile; also patch the load_data function to use the alias when specified.

- get solve.py to use the datafile aliasing option to switch between low and high EV adoption scenarios

+ check whether projects can be / are rebuilt after they reach their maximum age (i.e., why is wind dropping off in late years?) (forced BuildProj["Oahu_Wind_503_na", 2045] == 117.5 and it rebuilt it, but this raised costs overall)

! create an rps time_sample which has two days in every even numbered month
- create a mini rps time_sample (rps_mini), which only covers even months and even hours

run three scenarios:
1. no rps, no renewables, no ev adoption (use "no_ev" module to get driving cost included), no pumped hydro, no demand response

2a. rps, high ev adoption, demand response, no pumped hydro

2b. rps, high ev adoption, demand response, pumped hydro

- build a scenario tree:
*no_rps	no_ph	no_dr	no_ev

rps	no_ph	no_dr	no_ev
		dr	no_ev
			ev
	
	ph	no_dr	no_ev
		dr	no_ev
*			ev

